/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ultrasound.bookings;

import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JTextField;

/**
 *
 * @author ellix
 */
public class editSearch extends javax.swing.JFrame {

    /**
     * Creates new form edit
     */
    private List<List> everything;
    private String selected;
    private String initials;
    private List<String> fileNames;

    public editSearch(String initials) {
        initComponents();
        comboSetUp();
        readfile();
        this.initials = initials;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        first = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        last = new javax.swing.JTextField();
        namesearch = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        month = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        day = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        year = new javax.swing.JComboBox<>();
        dobsearch = new javax.swing.JButton();
        hour = new javax.swing.JTextField();
        timesearch = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        ddob = new javax.swing.JTextField();
        delete = new javax.swing.JButton();
        save = new javax.swing.JButton();
        dtype = new javax.swing.JComboBox<>();
        dtime = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        dnotes = new javax.swing.JTextField();
        dphone = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        dfirst = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        dlast = new javax.swing.JTextField();
        ddates = new javax.swing.JComboBox<>();
        status = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        min = new javax.swing.JTextField();
        menu = new javax.swing.JButton();
        date = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Edit Booking");

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel2.setText("Search by name");

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel3.setText("Search by date of birth");

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel4.setText("Search by time of appointment (example: 07082018 14:30)");

        jLabel5.setText("First name: ");

        jLabel6.setText("Last name: ");

        namesearch.setText("Search");
        namesearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                namesearchActionPerformed(evt);
            }
        });

        jLabel7.setText("Month");

        month.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel8.setText("Day");

        day.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel9.setText("Year");

        year.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        dobsearch.setText("Search");
        dobsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dobsearchActionPerformed(evt);
            }
        });

        hour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hourActionPerformed(evt);
            }
        });

        timesearch.setText("Search");
        timesearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timesearchActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel11.setText("Phone number");

        jLabel12.setText("DOB");

        delete.setText("Delete Booking");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        save.setText("Save Changes");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        dtype.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        dtype.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dtypeActionPerformed(evt);
            }
        });

        dtime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel13.setText("Additional Notes");

        jLabel15.setText("First name: ");

        jLabel16.setText("Last name: ");

        ddates.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ddates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ddatesActionPerformed(evt);
            }
        });

        status.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(jLabel15))
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dnotes, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ddob)
                            .addComponent(dphone)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(dfirst)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dlast, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(dtime, javax.swing.GroupLayout.Alignment.LEADING, 0, 111, Short.MAX_VALUE)
                                .addComponent(dtype, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(ddates, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(save, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(dfirst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(dlast, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(dphone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(ddob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(dnotes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ddates, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(status, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dtype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(save))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dtime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delete))
                .addGap(20, 20, 20))
        );

        jLabel14.setText(":");

        min.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minActionPerformed(evt);
            }
        });

        menu.setText("Main Menu");
        menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuActionPerformed(evt);
            }
        });

        date.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateActionPerformed(evt);
            }
        });

        jLabel10.setText("day month year: ");

        jLabel17.setText("time of the day");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(first, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(last, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(namesearch))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(month, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(day, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(dobsearch))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel4))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel10)
                        .addGap(5, 5, 5)
                        .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel17)
                        .addGap(5, 5, 5)
                        .addComponent(hour, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(min, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(timesearch)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(menu)
                .addGap(178, 178, 178))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(first, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(last, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(namesearch))
                .addGap(14, 14, 14)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(month, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(day, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dobsearch))
                .addGap(16, 16, 16)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timesearch)
                    .addComponent(jLabel14)
                    .addComponent(min, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel17))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(menu)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void readfile() {
        try {
            fileNames = new ArrayList<>();
            everything = new ArrayList<>();
            
            File file;

            DefaultComboBoxModel model = new DefaultComboBoxModel();
            DateTimeFormatter year = DateTimeFormatter.ofPattern("yyyy");
            DateTimeFormatter month = DateTimeFormatter.ofPattern("MM");
            DateTimeFormatter day = DateTimeFormatter.ofPattern("dd");
            LocalDateTime now = LocalDateTime.now();
            int nyear = Integer.parseInt(year.format(now));
            int nmonth = Integer.parseInt(month.format(now));
            int nday = Integer.parseInt(day.format(now));

            List<String> files;
            for (int i = 0; i < 30; i++) {
                file = new File("ultrasound booking " + String.format("%02d", nday) + String.format("%02d", nmonth) + String.format("%02d", nyear) + ".txt");
                if (file.exists()) {
                    fileNames.add("ultrasound booking " + String.format("%02d", nday) + String.format("%02d", nmonth) + String.format("%02d", nyear) + ".txt");
                    model.addElement(String.format("%02d", nday) + "/" + String.format("%02d", nmonth) + "/" + String.format("%02d", nyear));
                    files = new ArrayList<String>();
                    Scanner input = new Scanner(file);
                    while (input.hasNext()) {
                        files.add(input.nextLine());
                    }
                    everything.add(files);
                }
                nday++;
                if (nday == 32) {
                    switch (nmonth) {
                        case 1:
                        case 3:
                        case 5:
                        case 7:
                        case 8:
                        case 10:
                        case 12:
                            nmonth++;
                            nday = 1;
                    }
                } else if (nday == 31) {
                    switch (nmonth) {
                        case 3:
                        case 4:
                        case 6:
                        case 9:
                        case 11:
                            nmonth++;
                            nday = 1;
                    }
                }
                if (nmonth == 2) {
                    if (nyear % 4 == 0 && nday == 30) {
                        nmonth++;
                        nday = 1;
                    } else if (nyear % 4 != 0 && nday == 29) {
                        nmonth++;
                        nday = 1;
                    }
                }
            }
            ddates.setModel(model);
        } catch (Exception e) {

        }
    }
    private void namesearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_namesearchActionPerformed
        // TODO add your handling code here:
        status.setText("");
        
        List<String> list = new ArrayList<String>();
        List<String> files;

        for (int i = 0; i < everything.size(); i++) {
            for (int j = 0; j < everything.get(i).size(); j++) {
                files = everything.get(i);

                if (files.get(j).contains("first name " + first.getText().toUpperCase().trim())
                        && files.get(j).contains("last name " + last.getText().toUpperCase().trim())) {
                    list.add(files.get(j) + " " + i);
                }
            }

        }

        int ind = 0;
        if (list.size() > 1) {
            doubles dialog = new doubles(new javax.swing.JFrame(), true, list);
            dialog.setVisible(true);
            ind = (dialog.get());
        }
        if (list.size() > 0) {
            selected = list.get(ind);
            display(selected);
        }
    }//GEN-LAST:event_namesearchActionPerformed

    private void hourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hourActionPerformed

    }//GEN-LAST:event_hourActionPerformed

    private void dobsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dobsearchActionPerformed
        // TODO add your handling code here:
        status.setText("");
        int yer = year.getSelectedIndex() + 1900;
        String dob = String.format("%02d", day.getSelectedIndex() + 1) + String.format("%02d", month.getSelectedIndex() + 1) + yer;
        //

        List<String> list = new ArrayList<String>();
        List<String> files;

        for (int i = 0; i < everything.size(); i++) {
            for (int j = 0; j < everything.get(i).size(); j++) {
                files = everything.get(i);

                if (files.get(j).contains("dob " + dob)) {
                    list.add(files.get(j) + " " + i);
                }
            }

        }

        int ind = 0;
        if (list.size() > 1) {
            doubles dialog = new doubles(new javax.swing.JFrame(), true, list);
            dialog.setVisible(true);
            ind = (dialog.get());
        }
        if (list.size() > 0) {
            selected = list.get(ind);
            display(selected);
        }
    }//GEN-LAST:event_dobsearchActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
        delete();
        try {
            FileWriter writeMoved = new FileWriter(fileNames.get(ddates.getSelectedIndex()), true);
            Patient a = new Patient(fileNames.get(ddates.getSelectedIndex()), process(dfirst), process(dlast), process(dphone), process(ddob), process(dnotes), dtype.getSelectedItem().toString(), initials);

            if (!dtime.getSelectedItem().equals("Item 1") && !(process(dfirst) == null && process(dlast) == null && process(dphone) == null && process(ddob) == null && process(dnotes) == null)) {

                String time = selected.substring(0, selected.indexOf(" status"));

                //getting information on new times
                List<String> list;
                for (int i = 0; i < everything.get(ddates.getSelectedIndex()).size(); i++) {
                    list = everything.get(ddates.getSelectedIndex());
                    if (list.get(i).contains("status o") && list.get(i).contains(dtime.getSelectedItem().toString()) && list.get(i).contains(dtype.getSelectedItem().toString().toLowerCase())) {
                        time = list.get(i);
                        break;
                    }
                }
                a.write(writeMoved, time);
            }
        } catch (Exception e) {
        }

        status.setText("Saved!");
        readfile();
    }//GEN-LAST:event_saveActionPerformed

    private String process(JTextField in) {
        if (in.getText().isEmpty()) {
            return null;
        } else {
            return in.getText();
        }
    }

    private void delete() {
        try {

            List<String> list;
            int fileNumber = Integer.parseInt(selected.substring(selected.length() - 1));
            File file = new File(fileNames.get(fileNumber));
            FileWriter writer = new FileWriter(file);

            PrintWriter writer2 = new PrintWriter(file);
            writer2.print("");
            writer2.close();
            list = everything.get(fileNumber);
            for (int j = 0; j < list.size(); j++) {
                if (list.get(j).contains(selected.substring(0, selected.length() - 2))) {
                    everything.get(fileNumber).remove(j);
                    everything.get(fileNumber).add(j, selected.substring(0, selected.indexOf("status") + 7) + "o" + selected.substring(selected.indexOf("status") + 8, selected.indexOf(" first name")));

                }
                writer.write(everything.get(fileNumber).get(j) + System.getProperty("line.separator"));
            }
            writer.close();

        } catch (Exception e) {

        }

        status.setText("Deleted!");
    }

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
        delete();

        dfirst.setText("");
        dlast.setText("");
        dphone.setText("");
        ddob.setText("");
        dnotes.setText("");
        readfile();

    }//GEN-LAST:event_deleteActionPerformed

    private void minActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_minActionPerformed

    private void timesearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timesearchActionPerformed
        // TODO add your handling code here:
        status.setText("");
        List<String> list = new ArrayList<String>();
        List<String> files;

        for (int i = 0; i < everything.size(); i++) {
            for (int j = 0; j < everything.get(i).size(); j++) {
                files = everything.get(i);

                if (files.get(j).contains(hour.getText().trim() + ":" + min.getText().trim())
                        && files.get(j).contains("status b")) {
                    list.add(files.get(j) + " " + i);
                }
            }

        }

        int ind = 0;
        if (list.size() > 1) {
            doubles dialog = new doubles(new javax.swing.JFrame(), true, list);
            dialog.setVisible(true);
            ind = (dialog.get());
        }
        if (list.size() > 0) {
            selected = list.get(ind);
            display(selected);
        }
    }//GEN-LAST:event_timesearchActionPerformed

    private void menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new Main(initials).setVisible(true);
    }//GEN-LAST:event_menuActionPerformed

    private void dtypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dtypeActionPerformed
        // TODO add your handling code here:
        setdtime();
    }//GEN-LAST:event_dtypeActionPerformed

    private void dateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateActionPerformed

    private void setdtime() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        if (selected.contains(dtype.getSelectedItem().toString().toLowerCase())) {
            model.addElement(selected.substring(0, selected.indexOf(" status")));
        }

        List<String> files;
        for (int i = 0; i < everything.size(); i++) {
            files = everything.get(i);
            for (int j = 0; j < files.size(); j++) {
                if (files.get(j).contains("status o ") && files.get(j).contains(dtype.getSelectedItem().toString().toLowerCase()) && i == ddates.getSelectedIndex()) {
                    model.addElement(files.get(j).substring(0, files.get(j).indexOf(" status")));
                }
            }

        }
        dtime.setModel(model);
    }
    private void ddatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ddatesActionPerformed
        // TODO add your handling code here:
        setdtime();
    }//GEN-LAST:event_ddatesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(editSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(editSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(editSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(editSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new editSearch("--").setVisible(true);
            }
        });
    }

    public void comboSetUp() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.addElement("Jan");
        model.addElement("Feb");
        model.addElement("Mar");
        model.addElement("Apr");
        model.addElement("May");
        model.addElement("Jun");
        model.addElement("Jul");
        model.addElement("Aug");
        model.addElement("Sep");
        model.addElement("Oct");
        model.addElement("Nov");
        model.addElement("Dec");
        month.setModel(model);

        model = new DefaultComboBoxModel();
        for (int i = 1; i <= 31; i++) {
            model.addElement(i);
        }
        day.setModel(model);

        model = new DefaultComboBoxModel();
        for (int i = 1900; i < 2018; i++) {
            model.addElement(i);
        }
        year.setModel(model);

        model = new DefaultComboBoxModel();
        model.addElement("Urgent");
        model.addElement("Abd");
        model.addElement("18+ OBS");
        model.addElement("Thyroid");
        model.addElement("IPS");
        model.addElement("Male Pelvic or Young Female");
        model.addElement("Breast");
        model.addElement("Sctorum");
        model.addElement("Pelvic TV");
        model.addElement("Shoulder");
        model.addElement("Lump");
        model.addElement("Early OBS");
        model.addElement("Knee");
        dtype.setModel(model);
    }

    public void display(String in) {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.addElement("Urgent");
        model.addElement("Abd");
        model.addElement("18+ OBS");
        model.addElement("Thyroid");
        model.addElement("IPS");
        model.addElement("Male Pelvic or Young Female");
        model.addElement("Breast");
        model.addElement("Sctorum");
        model.addElement("Pelvic TV");
        model.addElement("Shoulder");
        model.addElement("Lump");
        model.addElement("Early OBS");
        model.addElement("Knee");
        dtype.setSelectedIndex(model.getIndexOf((in.substring(in.indexOf("type ") + 5, in.indexOf(" notes ")))));

        if (!in.substring(in.indexOf("first name") + 11, in.indexOf(" last name")).equals("null")) {
            dfirst.setText(in.substring(in.indexOf("first name") + 11, in.indexOf(" last name")));
        }
        if (!in.substring(in.indexOf("last name") + 10, in.indexOf(" phone number")).equals("null")) {
            dlast.setText(in.substring(in.indexOf("last name") + 10, in.indexOf(" phone number")));
        }
        if (!in.substring(in.indexOf("phone number") + 13, in.indexOf(" dob")).equals("null")) {
            dphone.setText(in.substring(in.indexOf("phone number") + 13, in.indexOf(" dob")));
        }
        if (!in.substring(in.indexOf("dob") + 4, in.indexOf(" type")).equals("null")) {
            ddob.setText(in.substring(in.indexOf("dob") + 4, in.indexOf(" type")));
        }

        ddates.setSelectedIndex(Integer.parseInt(in.substring(in.length() - 1)));

        //dtime
        model = new DefaultComboBoxModel();
        model.addElement(in.substring(0, in.indexOf(" status")));

        List<String> files;
        for (int i = 0; i < everything.size(); i++) {
            files = everything.get(i);
            for (int j = 0; j < files.size(); j++) {
                if (files.get(j).contains("status o ") && files.get(j).contains(dtype.getSelectedItem().toString().toLowerCase())) {
                    model.addElement(files.get(j).substring(0, files.get(j).indexOf(" status")));
                }

            }

        }
        dtime.setModel(model);

        if (!in.substring(in.indexOf(" notes") + 7, in.indexOf(" initial")).equals("null")) {
            dnotes.setText(in.substring(in.indexOf(" notes") + 7, in.indexOf(" initial")));
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField date;
    private javax.swing.JComboBox<String> day;
    private javax.swing.JComboBox<String> ddates;
    private javax.swing.JTextField ddob;
    private javax.swing.JButton delete;
    private javax.swing.JTextField dfirst;
    private javax.swing.JTextField dlast;
    private javax.swing.JTextField dnotes;
    private javax.swing.JButton dobsearch;
    private javax.swing.JTextField dphone;
    private javax.swing.JComboBox<String> dtime;
    private javax.swing.JComboBox<String> dtype;
    private javax.swing.JTextField first;
    private javax.swing.JTextField hour;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField last;
    private javax.swing.JButton menu;
    private javax.swing.JTextField min;
    private javax.swing.JComboBox<String> month;
    private javax.swing.JButton namesearch;
    private javax.swing.JButton save;
    private javax.swing.JLabel status;
    private javax.swing.JButton timesearch;
    private javax.swing.JComboBox<String> year;
    // End of variables declaration//GEN-END:variables
}
